# -*- coding: utf-8 -*-
"""predict_sentiment

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Lf7vHiGPKiv6imPZ47oYva-98lLJG6qr
"""

# predict_sentiment.py

from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

# Load the trained model
model = load_model('sentiment_model.h5')

# Define the max length for padding (same as when training the model)
max_length = 100

# Function to predict sentiment of a list of reviews
def predict_review_sentiment(reviews):
    # Tokenize the reviews using the same IMDB tokenizer used during training
    tokenizer = Tokenizer(num_words=20000)

    # Fit the tokenizer on the input reviews (usually you'd fit on training data, but we fit on input here)
    tokenizer.fit_on_texts(reviews)

    # Convert reviews to sequences
    sequences = tokenizer.texts_to_sequences(reviews)

    # Pad sequences to the same length as during model training
    padded_sequences = pad_sequences(sequences, maxlen=max_length)

    # Predict sentiment using the already trained model
    predictions = model.predict(padded_sequences)

    # Output predictions
    for review, prediction in zip(reviews, predictions):
        sentiment = 'Positive' if prediction >= 0.5 else 'Negative'
        print(f"Review: {review}\nPredicted Sentiment: {sentiment}\n")

# Example reviews to predict
custom_reviews = [
    "This movie was absolutely amazing! I loved the plot and characters.",
    "It was a complete waste of time. The acting was terrible.",
    "An average movie. Some good moments but overall forgettable."
]

predict_review_sentiment(custom_reviews)

from sklearn.metrics import confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

y_pred = (model.predict(X_test) > 0.5).astype("int32")
cm = confusion_matrix(y_test, y_pred)

plt.figure(figsize=(6,5))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()